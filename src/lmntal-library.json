{
  "io.stdin": {
    "signature": "io.stdin(-RetRort)",
    "description": "Returns a standard input port."
  },
  "io.stdout": {
    "signature": "io.stdout(-RetRort)",
    "description": "Returns a standard output port."
  },
  "io.stderr": {
    "signature": "io.stderr(-RetRort)",
    "description": "Returns a standard error port."
  },
  "io.read_byte": {
    "signature": "io.read_byte(+Port, -RetRort, -N)",
    "description": "Read a character from the input port Port and returns its code N and a new port RetRort. Returns -1 instead of N if the end of file is encountered."
  },
  "io.read_char": {
    "signature": "io.read_char(+Port, -RetRort, -C)",
    "description": "Read a character C from the input port Port and returns it as a unary atom with the name C a new port RetRort. Returns a unary atom 'eof' if the end of file is encountered."
  },
  "io.read_token": {
    "signature": "io.read_token(+Port, -RetRort, -Str)",
    "description": "Read a token Str separated by a space or a tab or a newline from the input port Port and returns the token and a new port RetRort. Returns a unary atom 'eof' if the end of file is encountered."
  },
  "io.read_line": {
    "signature": "io.read_line(+Port, -RetRort, -Str)",
    "description": "Read a single line Str from the input port Port and returns a new port RetRort."
  },
  "io.close_port": {
    "signature": "io.close_port(+Port, -RetRort)",
    "description": "Close Port and returns it as RetRort. Further operations on the port will cause an error."
  },
  "io.free_port": {
    "signature": "io.free_port(+Port)",
    "description": "Frees Port."
  },
  "io.print_byte": {
    "signature": "io.print_byte(+Port, +N, -RetRort)",
    "description": "Print the character with the code N to Port and return a new port RetRort."
  },
  "io.print_unary": {
    "signature": "io.print_unary(+Port, +C, -RetRort)",
    "description": "Print the name of a unary atom C to Port and return a new port RetRort."
  },
  "io.print_char": {
    "signature": "io.print_char(+Port, +C, -RetRort)",
    "description": "Print the name of an atom C to Port and return a new port RetRort. The atom name need not necessarily be a single character."
  },
  "io.print": {
    "signature": "io.print(+Port, +Str, -RetRort)",
    "description": "Print a string Str to Port and return a new port RetRort."
  },
  "io.print_line": {
    "signature": "io.print_line(+Port, +Str, -RetRort)",
    "description": "Print a string Str and a newline to Port and return a new port RetRort."
  },
  "io.print_newline": {
    "signature": "io.print_newline(+Port, -RetRort)",
    "description": "Print a newline to Port and return a new port RetRort."
  },
  "io.print_mem": {
    "signature": "io.print_mem(+Port, +M, -RetRort)",
    "description": "Print the content of the membrane M to Port and return a new port RetRort. The membrane must not have free links other than that linked to this API."
  },
  "io.open_output_string": {
    "signature": "io.open_output_string(-SRetRort)",
    "description": "Creates a new string output port SRetRort."
  },
  "io.open_input_string": {
    "signature": "io.open_input_string(+Str, -SRetRort)",
    "description": "Creates a new string input port SRetRort consisting of the characters in the string Str."
  },
  "io.output_string": {
    "signature": "io.output_string(+Port, -RetRort, -Str)",
    "description": "Dumps the current content of the string port Port to Str and returns the port as RetRort (without flushing it)."
  },
  "array.new": {
      "signature": "array.new(+List, -NewArray)",
      "description": "Creates an array with the elements in List and returns it to NewArray."
    },
    "array.free": {
      "signature": "array.free(+Array)",
      "description": "Frees Array."
    },
    "array.size": {
      "signature": "array.size(+Array, -N, -NewArray)",
      "description": "Returns the size of Array to N and the array itself to NewArray."
    },
    "array.get": {
      "signature": "array.get(+Array, +I, -Old, -NewArray)",
      "description": "Returns the Ith element of Array to Old and the array itself to NewArray."
    },
    "array.put": {
      "signature": "array.put(+Array, +I, +New, -NewArray)",
      "description": "Returns an array with the Ith element of Array replaced by New to NewArray."
    },
    "atom.new/2": {
    "signature": "atom.new(+F, +N, -A)",
    "description": "Creates a new atom with functor F and arity N, returns it as A."
  },
  "atom.new/3": {
    "signature": "atom.new(+F, +L, -A)",
    "description": "Creates a new atom with functor F and link list L, returns it as A."
  },
  "atom.functor": {
    "signature": "atom.functor(+A0, -F, -N, -A)",
    "description": "Returns the functor F and arity N of atom A0, and a new atom A."
  },
  "atom.swap": {
    "signature": "atom.swap(+A0, +I, +NewAi, -OldAi, -A)",
    "description": "Swaps the I-th link of atom A0 with NewAi, returns the old link OldAi and a new atom A."
  },
  "list.append": {
    "signature": "list.append(+List1, +List2, -Res)",
    "description": "Appends List2 to List1 and returns the result in Res."
  },
  "list.choose_k": {
    "signature": "list.choose_k(+List, +K, -Res)",
    "description": "Chooses K elements from List and returns them in Res."
  },
  "list.split": {
    "signature": "list.split(+List, +N, -Tail, -Head)",
    "description": "Splits List at position N into Head and Tail."
  },
  "list.reverse": {
    "signature": "list.reverse(+List, -ReversedList)",
    "description": "Reverses List and returns the result in ReversedList."
  },
  "list.flatten": {
    "signature": "list.flatten(+List, -Res)",
    "description": "Flattens nested List into a single-level list Res."
  },
  "string.from": {
    "signature": "string.from(+Atom, -Res)",
    "description": "Converts Atom to a string and returns it in Res."
  },
  "string.concat": {
    "signature": "string.concat(+Str1, +Str2, -Res)",
    "description": "Concatenates Str1 and Str2 and returns the result in Res."
  },
  "string.substr/2": {
    "signature": "string.substr(+Str, +K, -Res)",
    "description": "Extracts substring from Str starting at position K and returns it in Res."
  },
  "string.substr/3": {
    "signature": "string.substr(+Str, +B, +E, -Res)",
    "description": "Extracts substring from Str between positions B and E and returns it in Res."
  },
  "string.reverse": {
    "signature": "string.reverse(+Str, -ReversedStr)",
    "description": "Reverses Str and returns the result in ReversedStr."
  },
  "string.compress": {
    "signature": "string.compress(+List, -String)",
    "description": "Compresses a list of characters into a string and returns it in String."
  },
  "string.explode": {
    "signature": "string.explode(+String, -List)",
    "description": "Explodes a string into a list of characters and returns it in List."
  },
  "string.times": {
    "signature": "string.times(+Str, +N, -Res)",
    "description": "Repeats Str N times and returns the result in Res."
  },
  "string.join": {
    "signature": "string.join(+Glue, +StrList, -Res)",
    "description": "Joins the strings in StrList using Glue and returns the result in Res."
  }
}
